<!DOCTYPE html>
<html class=" -webkit-"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

  <meta charset="UTF-8">

  <title>CSS Responsive animated Accordion - CodePen</title>

  <link rel="stylesheet" href="http://s.codepen.io/assets/reset/reset.css">

  <style>@import url(http://fonts.googleapis.com/css?family=Lato:400,700);
* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

body {
  font-family: 'Lato';
}

h1 {
  font-size: 2em;
  padding: 2em;
  text-align: center;
}

.accordion dl {
  border: 1px solid #ddd;
}
.accordion dl:after {
  content: "";
  display: block;
  height: 1em;
  width: 100%;
  background-color: rgba(20, 103, 167, 1);
}
.accordion dt > a {
  text-align: center;
  font-weight: 700;
  padding: 2em;
  display: block;
  text-decoration: none;
  color: #fff;
  -webkit-transition: background-color 0.5s ease-in-out;
}
.accordion dd {
  background-color: #eee;
  font-size: 1em;
  line-height: 1.5em;
}
.accordion dd > p {
  padding: 1em 2em 1em 2em;
}

.accordion {
  position: relative;
  background-color: #eee;
}

.container {
  max-width: 960px;
  margin: 0 auto;
  padding: 2em 0 2em 0;
}

.accordionTitle {
  background-color: rgba(20, 103, 167, 1);
  border-bottom: 1px solid rgba(20, 103, 167, 1);
}
.accordionTitle:before {
  content: "+";
  font-size: 1.5em;
  line-height: 0.5em;
  float: left;
  -moz-transition: -moz-transform 0.3s ease-in-out;
  -o-transition: -o-transform 0.3s ease-in-out;
  -webkit-transition: -webkit-transform 0.3s ease-in-out;
  transition: transform 0.3s ease-in-out;
}
.accordionTitle:hover {
  background-color: rgba(15,25,134,1);
}

.accordionTitleActive {
  background-color: rgba(15,25,134,1);
}
.accordionTitleActive:before {
  -webkit-transform: rotate(-225deg);
  -moz-transform: rotate(-225deg);
  transform: rotate(-225deg);
}

.accordionItem {
  height: auto;
  overflow: hidden;
}
@media all {
  .accordionItem {
    max-height: 50em;
    -moz-transition: max-height 1s;
    -o-transition: max-height 1s;
    -webkit-transition: max-height 1s;
    transition: max-height 1s;
  }
}
@media screen and (min-width: 48em) {
  .accordionItem {
    max-height: 15em;
    -moz-transition: max-height 0.5s;
    -o-transition: max-height 0.5s;
    -webkit-transition: max-height 0.5s;
    transition: max-height 0.5s;
  }
}

.accordionItemCollapsed {
  max-height: 0;
}

.animateIn {
  -webkit-animation-name: accordionIn;
  -webkit-animation-duration: 0.65s;
  -webkit-animation-iteration-count: 1;
  -webkit-animation-direction: normal;
  -webkit-animation-timing-function: ease-in-out;
  -webkit-animation-fill-mode: both;
  -webkit-animation-delay: 0s;
  -moz-animation-name: normal;
  -moz-animation-duration: 0.65s;
  -moz-animation-iteration-count: 1;
  -moz-animation-direction: alternate;
  -moz-animation-timing-function: ease-in-out;
  -moz-animation-fill-mode: both;
  -moz-animation-delay: 0s;
  -webkit-animation-name: accordionIn;
  -webkit-animation-duration: 0.65s;
  -webkit-animation-iteration-count: 1;
  -webkit-animation-direction: normal;
  -webkit-animation-timing-function: ease-in-out;
  -webkit-animation-fill-mode: both;
  -webkit-animation-delay: 0s;
}

.animateOut {
  -webkit-animation-name: accordionOut;
  -webkit-animation-duration: 0.75s;
  -webkit-animation-iteration-count: 1;
  -webkit-animation-direction: alternate;
  -webkit-animation-timing-function: ease-in-out;
  -webkit-animation-fill-mode: both;
  -webkit-animation-delay: 0s;
  -moz-animation-name: accordionOut;
  -moz-animation-duration: 0.75s;
  -moz-animation-iteration-count: 1;
  -moz-animation-direction: alternate;
  -moz-animation-timing-function: ease-in-out;
  -moz-animation-fill-mode: both;
  -moz-animation-delay: 0s;
  -webkit-animation-name: accordionOut;
  -webkit-animation-duration: 0.75s;
  -webkit-animation-iteration-count: 1;
  -webkit-animation-direction: alternate;
  -webkit-animation-timing-function: ease-in-out;
  -webkit-animation-fill-mode: both;
  -webkit-animation-delay: 0s;
}

@-webkit-keyframes accordionIn {
  0% {
    opacity: 0;
    -webkit-transform: scale(0.8);
  }
  100% {
    opacity: 1;
    -webkit-transform: scale(1);
  }
}
@-moz-keyframes accordionIn {
  0% {
    opacity: 0;
    -moz-transform: scale(0.8);
  }
  100% {
    opacity: 1;
    -moz-transform: scale(1);
  }
}
@-webkit-keyframes accordionIn {
  0% {
    opacity: 0;
    transform: scale(0.8);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
@-webkit-keyframes accordionOut {
  0% {
    opacity: 1;
    -webkit-transform: scale(1);
  }
  100% {
    opacity: 0;
    -webkit-transform: scale(0.8);
  }
}
@-moz-keyframes accordionOut {
  0% {
    opacity: 1;
    -moz-transform: scale(1);
  }
  100% {
    opacity: 0;
    -moz-transform: scale(0.8);
  }
}
@-webkit-keyframes accordionOut {
  0% {
    opacity: 1;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0.8);
  }
}</style>

  <script>
    window.open    = function(){};
    window.print   = function(){};
    // Support hover state for mobile.
    if (false) {
      window.ontouchstart = function(){};
    }
  </script>

    <script src=".../scripts/js/prefixfree.min.js"></script>

</head>

<body>

  <div class="container">
          <h1 style="color:#ffffff;">ROBO SOCCER</h1>
          <div class="accordion">
            <dl>
              <dt><a class="accordionTitle" href="#" >Introduction</a></dt>
              <dd class="accordionItem animateOut accordionItemCollapsed">
              <p>“It's not the size of the BOT in the fight...it's the size of the fight in the BOT.”
 &nbsp;-Darryl<br>
Do you want to become the Robosoccer League champion? You got to prove it. Bring on
your bots on the field and lead your soccer team to victory!
In this Event every team has to make two manual wired or wireless Robots that can hit a
tennis ball into opponent’s Goal post. After the end of the game time, the team with
higher points is announced as the
Winner for that match and will be qualified to the next rounds. </p>

              </dd><dt><a class="accordionTitle" href="#">Rules And Regulation</a></dt>
              <dd class="accordionItem animateOut accordionItemCollapsed">
                <p>Arena</p>
                <p>1. The soccer field is 2.1 m x 1.3 m.         <br>
2. Blue field is 52 cm x 52 cm.                 <br>
3. Goal post is 42 cm in length and 30 cm in height.<br>
4. Boundary of the field will be covered by 15cms high wall.<br>
5. There are two regions in the field, green field and blue field </p>
                <p>Rules</p>
                <p>1. Match will start from the center of the field with the TT ball kept in the yellow
circle.<br>
2. At the starting of the match one of the bots should be in the blue field. The other
bot of the same team should be in the green field. <br>
3. The bot should not cross the opponent’s field before the start of the match.
Violation leads -5 points.      <br>
4. Two manual bots of the same team should not enter into any of the blue fields
together. Only one bot at a time from each team can enter into blue field. In the
blue field, it is completely one on one match. If more than 50% of the second Bot
enters the blue region a penalty of -5 points will be given and opponent gets the
ball. <br>
5. If one Bot gets ‘pushed’ into the blue region which already has another Bot of the
same team. Penalty won’t be given.<br>
6. Two manual bots of each team can enter into the green field at any time, once
the match starts.<br>
7. For every goal 20 points will be awarded.<br>
8. None of the bot should hold the ball more than 5secs. If it holds more than the
prescribed time ball will be passed to opponent team.<br>
9. Bots shouldn’t destroy the opponent Bots. They have to take care of their wirings.
The wirings should be at height of 30cms from the game field. Wirings shouldn’t
touch the game field. If any team tries to disturb the game intentionally using
wires, penalty of -2 points will be given and opponent gets the ball.<br>
10.Any bot can score a goal from anywhere on the game field following the 4th rule,
otherwise no goal will be awarded and –ve points will be awarded according to
that rule, and match will be started by the opponent team from their blue field.<br>
11.Every match is 5 minutes in the first round. The duration for the matches in the
next rounds will be decided by the organizers.<br>
12.If ball goes outside the field then opponent will start the match from that point
without any timeout.<br>
13.Finally, the winner is the team who scores more points at the end of the match.<br>
14.In case of a tie, only one-on-one match with 2 minutes and who ever scored first
goal within 2 minutes is announced as the winner of the match. If there is a tie
between two teams still, another tie breaker match of 2 minutes will be played.<br>
15.If you are making a wireless Bot, you should be able to control your Bot with two
different frequencies.<br>
16.In case of any discrepancy, organizers’ decision is final.<br> </p>
            <p>Eligibility</p>
            <p>All students with a valid identity card of their respective educational institutes are
eligible to participate. A team should consist of 2 members. Students from different
educational institutes can form a team. </p>
            <p>Bot Dimensions</p>
            <p>1. Bot maximum dimensions should be 26cm X 26cm X 25 cm<br>
2. Maximum of 12v will be allowed on the bot, no external supply will be allowed.<br>
3. Bot can be controlled by a wired remote or a wireless one.<br>
4. Maximum weight of the bot is 3kgs (including batteries, motor everything except
remote controller).
</p>



                </dd>
              <dt><a class="accordionTitle" href="#">Registration</a></dt>
              <dd class="accordionItem animateOut accordionItemCollapsed">
                <p>Coming Soon!</p> </dd>
              <dt><a class="accordionTitle" href="#">Contact Us</a></dt>
              <dd class="accordionItem animateOut accordionItemCollapsed">
             <p>Loke Sankrandan<br> ee13b1018@iith.ac.in<br> 9989204345<br>
Ali Hyder<br> ee13b1041@iith.ac.in<br> 8297617063
</p> </dd>
            </dl>
          </div>
        </div>

  <script src=".../scripts/js/localstorage.js"></script>
  <script src=".../scripts/js/remember_scroll.js"></script>
  <script>RememberScroll.init();</script>

  <script>
    if (document.location.search.match(/type=embed/gi)) {
      window.parent.postMessage('resize', "*");
    }
  </script>

  <script>
    /*!
 * classie - class helper functions
 * from bonzo https://github.com/ded/bonzo
 *
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

/*jshint browser: true, strict: true, undef: true */
/*global define: false */

( function( window ) {

'use strict';

// class helper functions from bonzo https://github.com/ded/bonzo

function classReg( className ) {
  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
}

// classList support for class management
// altho to be fair, the api sucks because it won't accept multiple classes at once
var hasClass, addClass, removeClass;

if ( 'classList' in document.documentElement ) {
  hasClass = function( elem, c ) {
    return elem.classList.contains( c );
  };
  addClass = function( elem, c ) {
    elem.classList.add( c );
  };
  removeClass = function( elem, c ) {
    elem.classList.remove( c );
  };
}
else {
  hasClass = function( elem, c ) {
    return classReg( c ).test( elem.className );
  };
  addClass = function( elem, c ) {
    if ( !hasClass( elem, c ) ) {
      elem.className = elem.className + ' ' + c;
    }
  };
  removeClass = function( elem, c ) {
    elem.className = elem.className.replace( classReg( c ), ' ' );
  };
}

function toggleClass( elem, c ) {
  var fn = hasClass( elem, c ) ? removeClass : addClass;
  fn( elem, c );
}

var classie = {
  // full names
  hasClass: hasClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  // short names
  has: hasClass,
  add: addClass,
  remove: removeClass,
  toggle: toggleClass
};

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( classie );
} else {
  // browser global
  window.classie = classie;
}

})( window );

//fake jQuery
var $ = function(selector){
  return document.querySelector(selector);
}
var accordion = $('.accordion');

//add event listener to all anchor tags with accordion title class
accordion.addEventListener("click",function(e) {
  e.stopPropagation();
  e.preventDefault();
  if(e.target && e.target.nodeName == "A") {
    var classes = e.target.className.split(" ");
    if(classes) {
      for(var x = 0; x < classes.length; x++) {
        if(classes[x] == "accordionTitle") {
          var title = e.target;

          //next element sibling needs to be tested in IE8+ for any crashing problems
          var content = e.target.parentNode.nextElementSibling;

          //use classie to then toggle the active class which will then open and close the accordion

          classie.toggle(title, 'accordionTitleActive');
          //this is just here to allow a custom animation to treat the content
          if(classie.has(content, 'accordionItemCollapsed')) {
            if(classie.has(content, 'animateOut')){
              classie.remove(content, 'animateOut');
            }
            classie.add(content, 'animateIn');

          }else{
             classie.remove(content, 'animateIn');
             classie.add(content, 'animateOut');
          }
          //remove or add the collapsed state
          classie.toggle(content, 'accordionItemCollapsed');

        }
      }
    }

  }
});
    //@ sourceURL=pen.js
  </script>




</body></html>